=begin pod

=TITLE class Cool

=SUBTITLE Object that can be treated as both a string and number

    class Cool is Any { }

C<Cool>, also known as the B<C>onvenient B<OO> B<L>oop, is a base class employed
by a number of built-in classes whose instances can be meaningfully coerced to a
string and a number. For example, an L<Array|/type/Array> can be used in
mathematical operations, where its numerical representation is the number of
elements it contains. At the same time, it can be concatenated to a string,
where its stringy representation is all of its elements L<joined|/routine/join>
by a space. Because L<Array|/type/Array> is L<Cool|/type/Cool>, the appropriate
coercion happens automatically.

Methods in C<Cool> coerce the invocant to a more specific type, and then call
the same method on that type. For example both L<Int|/type/Int> and
L<Str|/type/Str> inherit from C<Cool>, and calling method C<substr> on an C<Int>
converts the integer to C<Str> first.

    123.substr(1, 1);   # '2', same as 123.Str.substr(1, 1)

The following built-in types inherit from C<Cool>: L<Array|/type/Array>
L<Bool|/type/Bool> L<Complex|/type/Complex> L<Cool|/type/Cool>
L<Duration|/type/Duration> L<Map|/type/Map> L<FatRat|/type/FatRat>
L<Hash|/type/Hash> L<Instant|/type/Instant> L<Int|/type/Int> L<List|/type/List>
L<Match|/type/Match> L<Nil|/type/Nil> L<Num|/type/Num> L<Range|/type/Range>
L<Seq|/type/Seq> L<Stash|/type/Stash> L<Str|/type/Str>.

The following table summarizes the methods that C<Cool> provides, and
what type they coerce to:

=begin table

    method          coercion type

    abs             Numeric
    conj            Numeric
    sqrt            Numeric
    sign            Real
    rand            Numeric
    sin             Numeric
    asin            Numeric
    cos             Numeric
    acos            Numeric
    tan             Numeric
    tanh            Numeric
    atan            Numeric
    atan2           Numeric
    atanh           Numeric
    sec             Numeric
    asec            Numeric
    cosec           Numeric
    acosec          Numeric
    cotan           Numeric
    cotanh          Numeric
    acotan          Numeric
    sinh            Numeric
    asinh           Numeric
    cosh            Numeric
    acosh           Numeric
    sech            Numeric
    asech           Numeric
    cosech          Numeric
    acosech         Numeric
    acotanh         Numeric
    cis             Numeric
    log             Numeric
    exp             Numeric
    roots           Numeric
    log10           Numeric
    unpolar         Numeric
    round           Numeric
    floor           Numeric
    ceiling         Numeric
    truncate        Numeric
    chr             Int
    ord             Str
    chars           Str
    fmt             Str
    uniname         Str
    uninames        Seq
    unival          Str
    univals         Str
    uniprop         Str
    unimatch        Str
    uc              Str
    lc              Str
    fc              Str
    tc              Str
    tclc            Str
    flip            Str
    trans           Str
    contains        Str
    index           Str
    rindex          Str
    ords            Str
    split           Str
    match           Str
    comb            Str
    subst           Str
    sprintf         Str
    printf          Str
    samecase        Str
    trim            Str
    trim-leading    Str
    trim-trailing   Str
    EVAL            Str
    chomp           Str
    chop            Str
    codes           Str

=end table

=head1 Methods

=head2 routine abs

Defined as:

    sub abs(Numeric() $x)
    method abs()

Coerces the invocant (or in the sub form, the argument) to
L<Numeric|/type/Numeric> and returns the absolute value (that is, a
non-negative number).

    say (-2).abs;       # OUTPUT: «2␤»
    say abs "6+8i";     # OUTPUT: «10␤»

=head2 method conj

Defined as:

    method conj()

Coerces the invocant to L<Numeric|/type/Numeric> and returns the
L<complex|/type/Complex> conjugate (that is, the number with the sign of the
imaginary part negated).

    say (1+2i).conj;        # OUTPUT: «1-2i␤»

=head2 routine sqrt

Defined as:

    sub sqrt(Numeric(Cool) $x)
    method sqrt()

Coerces the invocant to L<Numeric|/type/Numeric> (or in the sub form, the
argument) and returns the square root, that is, a non-negative number that, when
multiplied with itself, produces the original number.

    say 4.sqrt;             # OUTPUT: «2␤»
    say sqrt(2);            # OUTPUT: «1.4142135623731␤»

=head2 method sign

Defined as:

    method sign()

Coerces the invocant to L<Numeric|/type/Real> and returns its sign, that
is, 0 if the number is 0, 1 for positive and -1 for negative values.

    say 6.sign;             # OUTPUT: «1␤»
    say (-6).sign;          # OUTPUT: «-1␤»
    say "0".sign;           # OUTPUT: «0␤»

=head2 method rand

Defined as:

    method rand()

Coerces the invocant to L<Num|/type/Num> and returns a pseudo-random value
between zero and the number.

    say 1e5.rand;           # OUTPUT: «33128.495184283␤»

=head2 routine sin

Defined as:

    sub sin(Numeric(Cool))
    method sin()

Coerces the invocant (or in the sub form, the argument) to L<Numeric|/type/Numeric>, interprets it as radians,
returns its L<sine|https://en.wikipedia.org/wiki/Sine>.

    say sin(0);             # OUTPUT: «0␤»
    say sin(pi/4);          # OUTPUT: «0.707106781186547␤»
    say sin(pi/2);          # OUTPUT: «1␤»

Note that Perl 6 is no computer algebra system, so C<sin(pi)> typically does
not produce an exact 0, but rather a very small L<floating-point
number|/type/Num>.

=head2 routine asin

Defined as:

    sub asin(Numeric(Cool))
    method asin()

Coerces the invocant (or in the sub form, the argument) to
L<Numeric|/type/Numeric>, and returns its
L<arc-sine|https://en.wikipedia.org/wiki/Inverse_trigonometric_functions> in
radians.

    say 0.1.asin;               # OUTPUT: «0.10016742116156␤»
    say asin(0.1);              # OUTPUT: «0.10016742116156␤»

=head2 routine cos

Defined as:

    sub cos(Numeric(Cool))
    method cos()

Coerces the invocant (or in sub form, the argument) to L<Numeric|/type/Numeric>,
interprets it as radians, returns its
L<cosine|https://en.wikipedia.org/wiki/Cosine>.

    say 0.cos;                  # OUTPUT: «1␤»
    say pi.cos;                 # OUTPUT: «-1␤»
    say cos(pi/2);              # OUTPUT: «6.12323399573677e-17␤»

=head2 routine acos

Defined as:

    sub acos(Numeric(Cool))
    method acos()

Coerces the invocant (or in sub form, the argument) to L<Numeric|/type/Numeric>, and returns its
L<arc-cosine|https://en.wikipedia.org/wiki/Inverse_trigonometric_functions> in
radians.

    say 1.acos;                 # OUTPUT: «0␤»
    say acos(-1);               # OUTPUT: «3.14159265358979␤»

=head2 routine tan

Defined as:

    sub tan(Numeric(Cool))
    method tan()

Coerces the invocant (or in sub form, the argument) to L<Numeric|/type/Numeric>, interprets it as radians,
returns its L<tangent|https://en.wikipedia.org/wiki/Tangent>.

    say tan(3);                 # OUTPUT: «-0.142546543074278␤»
    say 3.tan;                  # OUTPUT: «-0.142546543074278␤»

=head2 routine atan

Defined as:

    sub atan(Numeric(Cool))
    method atan()

Coerces the invocant (or in sub form, the argument) to L<Numeric|/type/Numeric>, and returns its
L<arc-tangent|https://en.wikipedia.org/wiki/Inverse_trigonometric_functions> in
radians.

    say atan(3);                # OUTPUT: «1.24904577239825␤»
    say 3.atan;                 # OUTPUT: «1.24904577239825␤»

=head2 routine atan2

Defined as:

    method atan2($y = 1e0)

Coerces self and argument to L<Numeric|/type/Numeric>, using them to compute the
two-argument L<arc-tangent|https://en.wikipedia.org/wiki/Atan2> in radians.

    say 3.atan2;                # OUTPUT: «1.24904577239825␤»
    say ⅔.atan2(⅓);             # OUTPUT: «1.1071487177940904␤»

The first argument defaults to 1, so in the first case the function will return
the angle θ in radians between a vector that goes from origin to the point (3, 1)
and the x axis.

=head2 routine sec

Defined as:

    sub sec(Numeric(Cool))
    method sec()

Coerces the invocant (or in sub form, its argument) to L<Numeric|/type/Numeric>, interprets it as radians,
returns its L<secant|https://en.wikipedia.org/wiki/Trigonometric_functions#Reciprocal_functions>,
that is, the reciprocal of its cosine.

    say 45.sec;                 # OUTPUT: «1.90359440740442␤»
    say sec(45);                # OUTPUT: «1.90359440740442␤»

=head2 routine asec

Defined as:

    sub asec(Numeric(Cool))
    method asec()

Coerces the invocant (or in sub form, its argument) to L<Numeric|/type/Numeric>,
and returns its
L<arc-secant|https://en.wikipedia.org/wiki/Inverse_trigonometric_functions> in
radians.

    say 1.asec;                 # OUTPUT: «0␤»
    say sqrt(2).asec;           # OUTPUT: «0.785398163397448␤»

=head2 routine cosec

Defined as:

    sub cosec(Numeric(Cool))
    method cosec()

Coerces the invocant (or in sub form, its argument) to L<Numeric|/type/Numeric>,
interprets it as radians, returns its
L<cosecant|https://en.wikipedia.org/wiki/Trigonometric_functions#Reciprocal_functions>,
that is, the reciprocal of its sine.

    say 0.45.cosec;             # OUTPUT: «2.29903273150897␤»
    say cosec(0.45);            # OUTPUT: «2.29903273150897␤»

=head2 routine acosec

Defined as:

    sub acosec(Numeric(Cool))
    method acosec()

Coerces the invocant (or in sub form, its argument) to L<Numeric|/type/Numeric>,
and returns its
L<arc-cosecant|https://en.wikipedia.org/wiki/Inverse_trigonometric_functions> in
radians.

    say 45.acosec;              # OUTPUT: «0.0222240516182672␤»
    say acosec(45)              # OUTPUT: «0.0222240516182672␤»

=head2 routine cotan

Defined as:

    sub cotan(Numeric(Cool))
    method cotan()

Coerces the invocant (or in sub form, its argument) to L<Numeric|/type/Numeric>,
interprets it as radians, returns its
L<cotangent|https://en.wikipedia.org/wiki/Trigonometric_functions#Reciprocal_functions>,
that is, the reciprocal of its tangent.

    say 45.cotan;               # OUTPUT: «0.617369623783555␤»
    say cotan(45);              # OUTPUT: «0.617369623783555␤»

=end pod

# vim: expandtab softtabstop=4 shiftwidth=4 ft=perl6
