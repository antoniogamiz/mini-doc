=begin pod

=TITLE class Str

=SUBTITLE String of characters

    class Str is Cool does Stringy { }

Built-in class for strings. Objects of type C<Str> are immutable, but
L<read the FAQ to understand precisely what this means|/language/faq#If_Str_is_immutable,_how_does_s///_work?_If_Int_is_immutable,_how_does_$i%2B%2B_work?>.

=head1 Methods

=head2 routine chop

     multi method chop(Str:D:)
     multi method chop(Str:D: Int() $chopping)

Returns the string with C<$chopping> characters removed from the end.

    say "Whateverable".chop(3.6);  # OUTPUT: «Whatevera␤»
    my $string= "Whateverable";
    say $string.chop("3");         # OUTPUT: «Whatevera␤»

The C<$chopping> positional is converted to C<Int> before being applied to the
string.

=head2 routine chomp

Defined as:

    multi sub    chomp(Str:D  --> Str:D)
    multi method chomp(Str:D: --> Str:D)

Returns the string with a logical newline (any codepoint that has the
C<NEWLINE> property) removed from the end.

Examples:

    say chomp("abc\n");       # OUTPUT: «abc␤»
    say "def\r\n".chomp;      # OUTPUT: «def␤» NOTE: \r\n is a single grapheme!
    say "foo\r".chomp;        # OUTPUT: «foo␤»

=head2 method contains

Defined as:

    multi method contains(Str:D: Cool:D $needle --> Bool:D)
    multi method contains(Str:D: Str:D $needle --> Bool:D)
    multi method contains(Str:D: Cool:D $needle, Int(Cool:D) $pos --> Bool:D)
    multi method contains(Str:D: Str:D $needle, Int:D $pos --> Bool:D)

Coerces the invocant (represented in the signature by C<Str:D:>, that would be
the I<haystack>) and first argument (which we are calling C<$needle>) to
L<C<Str>|/type/Str> (if it's not already, that is, in the first and third
C<multi> forms), and searches for C<$needle> in the invocant (or I<haystack>)
starting from C<$pos> characters into the string, if that is included as an
argument. Returns C<True> if C<$needle> is found. C<$pos> is an optional
parameter, and if it's not present, C<contains> will search from the beginning
of the string (using the first two forms of the C<multi>).

    say <Hello, World>.contains('Hello', 0);   # OUTPUT: «True␤»
    say "Hello, World".contains('Hello');      # OUTPUT: «True␤»
    say "Hello, World".contains('hello');      # OUTPUT: «False␤»
    say "Hello, World".contains('Hello', 1);   # OUTPUT: «False␤»
    say "Hello, World".contains(',');          # OUTPUT: «True␤»
    say "Hello, World".contains(',', 3);       # OUTPUT: «True␤»
    say "Hello, World".contains(',', 10);      # OUTPUT: «False␤»

In the first example, coercion is used to convert a C<List> to a Str.
In the 4th case, the C<'Hello'> string is not found since we have
started looking at the second position in it (index 1). Note that
because of how a L<List|/type/List> or L<Array|/type/Array> is
L<coerced|/type/List#method_Str> into a L<Str|/type/Str>, the results
may sometimes be surprising. See
L<traps|/language/traps#Lists_become_strings,_so_beware_.contains()>.

=head2 routine lc

Defined as:

    multi sub    lc(Str:D  --> Str:D)
    multi method lc(Str:D: --> Str:D)

Returns a lower-case version of the string.

Examples:

    lc("A"); # RESULT: «"a"»
    "A".lc;  # RESULT: «"a"»

=head2 routine uc

    multi sub    uc(Str:D  --> Str:D)
    multi method uc(Str:D: --> Str:D)

Returns an uppercase version of the string.

=head2 routine fc

    multi sub    fc(Str:D  --> Str:D)
    multi method fc(Str:D: --> Str:D)

Does a Unicode "fold case" operation suitable for doing caseless
string comparisons.  (In general, the returned string is unlikely to
be useful for any purpose other than comparison.)

=head2 routine tc

    multi sub    tc(Str:D  --> Str:D)
    multi method tc(Str:D: --> Str:D)

Does a Unicode "titlecase" operation, that is changes the first character in
the string to title case, or to upper case if the character has no title case
mapping

=head2 routine tclc

    multi sub    tclc(Str:D  --> Str:D)
    multi method tclc(Str:D: --> Str:D)

Turns the first character to title case, and all other characters to lower
case

=head2 routine wordcase

=for code
multi sub    wordcase(Cool $x  --> Str)
multi sub    wordcase(Str:D $x --> Str)
multi method wordcase(Str:D: :&filter = &tclc, Mu :$where = True --> Str)

Returns a string in which C<&filter> has been applied to all the words
that match C<$where>. By default, this means that the first letter of
every word is capitalized, and all the other letters lowercased.

=head2 method unival

    multi method unival(Str:D --> Numeric)

Returns the numeric value that the first codepoint in the invocant represents,
or C<NaN> if it's not numeric.

    say '4'.unival;     # OUTPUT: «4␤»
    say '¾'.unival;     # OUTPUT: «0.75␤»
    say 'a'.unival;     # OUTPUT: «NaN␤»

=head2 method univals

    multi method univals(Str:D --> List)

Returns a list of numeric values represented by each codepoint in the invocant
string, and C<NaN> for non-numeric characters.

    say "4a¾".univals;  # OUTPUT: «(4 NaN 0.75)␤»

=head2 routine chars

    multi sub    chars(Cool  $x --> Int:D)
    multi sub    chars(Str:D $x --> Int:D)
    multi sub    chars(str   $x --> int)
    multi method chars(Str:D:   --> Int:D)

Returns the number of characters in the string in graphemes. On the JVM,
this currently erroneously returns the number of codepoints instead.

=head2 method indices

Defined as:

    multi method indices(Str:D: Str:D $needle, :$overlap --> List:D)
    multi method indices(Str:D: Str:D $needle, Int:D $start, :$overlap --> List:D)

Searches for all occurrences of C<$needle> in the string starting from position
C<$start>, or zero if it is not specified, and returns a C<List> with all offsets
in the string where C<$needle> was found, or an empty list if it was not found.

If the optional parameter C<:overlap> is specified the search continues from the
index directly following the previous match, otherwise the search will continue
after the previous match.

    say "banana".indices("a");              # OUTPUT: «(1 3 5)␤»
    say "banana".indices("ana");            # OUTPUT: «(1)␤»
    say "banana".indices("ana", :overlap);  # OUTPUT: «(1 3)␤»
    say "banana".indices("ana", 2);         # OUTPUT: «(3)␤»

=end pod

# vim: expandtab softtabstop=4 shiftwidth=4 ft=perl6
